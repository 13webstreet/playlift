//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TRMTestRig.TRMWebServiceJson {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TRMWebServiceJson.ITRMWCFWebServiceJson")]
    public interface ITRMWCFWebServiceJson {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/SaveUserAccount", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/SaveUserAccountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool SaveUserAccount(DomainModel.Entities.User user, DomainModel.Entities.Account.AccountTypeList accountType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/SaveUserAccount", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/SaveUserAccountResponse")]
        System.Threading.Tasks.Task<bool> SaveUserAccountAsync(DomainModel.Entities.User user, DomainModel.Entities.Account.AccountTypeList accountType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetUserAccount", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetUserAccountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        DomainModel.Entities.Account GetUserAccount(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetUserAccount", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetUserAccountResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Account> GetUserAccountAsync(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAccount", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAccountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool DeleteAccount(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAccount", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAccountResponse")]
        System.Threading.Tasks.Task<bool> DeleteAccountAsync(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllArtists", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllArtistsResponse")]
        DomainModel.Entities.Artist[] GetAllArtists();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllArtists", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllArtistsResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Artist[]> GetAllArtistsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/SaveArtistAlbum", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/SaveArtistAlbumResponse")]
        bool SaveArtistAlbum(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/SaveArtistAlbum", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/SaveArtistAlbumResponse")]
        System.Threading.Tasks.Task<bool> SaveArtistAlbumAsync(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbums", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbumsResponse")]
        DomainModel.Entities.Album[] GetArtistAlbums(DomainModel.Entities.Artist artist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbums", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbumsResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Album[]> GetArtistAlbumsAsync(DomainModel.Entities.Artist artist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbumDetails", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbumDetailsResponse")]
        DomainModel.Entities.Album GetArtistAlbumDetails(int albumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbumDetails", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistAlbumDetailsResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Album> GetArtistAlbumDetailsAsync(int albumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteArtistAlbum", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteArtistAlbumResponse")]
        bool DeleteArtistAlbum(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteArtistAlbum", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteArtistAlbumResponse")]
        System.Threading.Tasks.Task<bool> DeleteArtistAlbumAsync(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/UploadSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/UploadSongResponse")]
        bool UploadSong(DomainModel.Entities.Song song, string filePath, string ext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/UploadSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/UploadSongResponse")]
        System.Threading.Tasks.Task<bool> UploadSongAsync(DomainModel.Entities.Song song, string filePath, string ext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DownloadSongOnServer", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DownloadSongOnServerResponse")]
        string DownloadSongOnServer(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DownloadSongOnServer", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DownloadSongOnServerResponse")]
        System.Threading.Tasks.Task<string> DownloadSongOnServerAsync(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DownloadFile", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DownloadFileResponse")]
        System.IO.Stream DownloadFile(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DownloadFile", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DownloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllSongs", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllSongsResponse")]
        DomainModel.Entities.Song[] GetAllSongs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllSongs", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllSongsResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Song[]> GetAllSongsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongs", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongsResponse")]
        DomainModel.Entities.Song[] GetArtistSongs(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongs", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongsResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Song[]> GetArtistSongsAsync(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongDetails", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongDetailsResponse")]
        DomainModel.Entities.Song GetArtistSongDetails(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongDetails", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistSongDetailsResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Song> GetArtistSongDetailsAsync(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssets", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssetsResponse")]
        DomainModel.Entities.MediaAsset[] GetSongMediaAssets(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssets", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssetsResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.MediaAsset[]> GetSongMediaAssetsAsync(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssetsForDownload", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssetsForDownloadResponse")]
        DomainModel.Entities.MediaAsset[] GetSongMediaAssetsForDownload(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssetsForDownload", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetSongMediaAssetsForDownloadResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.MediaAsset[]> GetSongMediaAssetsForDownloadAsync(int songId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteSongResponse")]
        bool DeleteSong(DomainModel.Entities.Song song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteSongResponse")]
        System.Threading.Tasks.Task<bool> DeleteSongAsync(DomainModel.Entities.Song song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAlbumSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAlbumSongResponse")]
        bool DeleteAlbumSong(DomainModel.Entities.Song song, DomainModel.Entities.Album album);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAlbumSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteAlbumSongResponse")]
        System.Threading.Tasks.Task<bool> DeleteAlbumSongAsync(DomainModel.Entities.Song song, DomainModel.Entities.Album album);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinesses", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinessesResponse")]
        DomainModel.Entities.Business[] GetAllBusinesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinesses", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinessesResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Business[]> GetAllBusinessesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/SavePlaylist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/SavePlaylistResponse")]
        bool SavePlaylist(int wordpressUserId, DomainModel.Entities.Playlist playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/SavePlaylist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/SavePlaylistResponse")]
        System.Threading.Tasks.Task<bool> SavePlaylistAsync(int wordpressUserId, DomainModel.Entities.Playlist playlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylistResponse")]
        bool DeletePlaylist(int playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylistResponse")]
        System.Threading.Tasks.Task<bool> DeletePlaylistAsync(int playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylistSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylistSongResponse")]
        bool DeletePlaylistSong(int songId, int playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylistSong", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeletePlaylistSongResponse")]
        System.Threading.Tasks.Task<bool> DeletePlaylistSongAsync(int songId, int playlistId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinessTypes", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinessTypesResponse")]
        DomainModel.Entities.BusinessType[] GetAllBusinessTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinessTypes", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllBusinessTypesResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.BusinessType[]> GetAllBusinessTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllGenres", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllGenresResponse")]
        DomainModel.Entities.Genre[] GetAllGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAllGenres", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAllGenresResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Genre[]> GetAllGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetGenre", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetGenreResponse")]
        DomainModel.Entities.Genre GetGenre(int genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetGenre", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetGenreResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Genre> GetGenreAsync(int genreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterAdmin", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterAdminResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool RegisterAdmin(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterAdmin", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterAdminResponse")]
        System.Threading.Tasks.Task<bool> RegisterAdminAsync(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterArtist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterArtistResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool RegisterArtist(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterArtist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterArtistResponse")]
        System.Threading.Tasks.Task<bool> RegisterArtistAsync(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterBusiness", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterBusinessResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool RegisterBusiness(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterBusiness", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterBusinessResponse")]
        System.Threading.Tasks.Task<bool> RegisterBusinessAsync(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterCustomer", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterCustomerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool RegisterCustomer(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/RegisterCustomer", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/RegisterCustomerResponse")]
        System.Threading.Tasks.Task<bool> RegisterCustomerAsync(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/UpdateBusinessUser", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/UpdateBusinessUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool UpdateBusinessUser(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/UpdateBusinessUser", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/UpdateBusinessUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateBusinessUserAsync(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/UpdateArtistGenreCollection", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/UpdateArtistGenreCollectionResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool UpdateArtistGenreCollection(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/UpdateArtistGenreCollection", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/UpdateArtistGenreCollectionResponse")]
        System.Threading.Tasks.Task<bool> UpdateArtistGenreCollectionAsync(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByWordpressUserId", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByWordpressUserIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        DomainModel.Entities.User GetUserByWordpressUserId(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByWordpressUserId", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByWordpressUserIdResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.User> GetUserByWordpressUserIdAsync(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByUserId", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByUserIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        DomainModel.Entities.User GetUserByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByUserId", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetUserByUserIdResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.User> GetUserByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAdmin", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAdminResponse")]
        DomainModel.Entities.Admin GetAdmin(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetAdmin", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetAdminResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Admin> GetAdminAsync(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistResponse")]
        DomainModel.Entities.Artist GetArtist(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetArtist", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetArtistResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Artist> GetArtistAsync(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetBusiness", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetBusinessResponse")]
        DomainModel.Entities.Business GetBusiness(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetBusiness", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetBusinessResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Business> GetBusinessAsync(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetCustomer", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetCustomerResponse")]
        DomainModel.Entities.Customer GetCustomer(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/GetCustomer", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/GetCustomerResponse")]
        System.Threading.Tasks.Task<DomainModel.Entities.Customer> GetCustomerAsync(int wordpressUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteUser", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Business))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Artist))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Admin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DomainModel.Entities.Customer))]
        bool DeleteUser(DomainModel.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITRMWCFWebServiceJson/DeleteUser", ReplyAction="http://tempuri.org/ITRMWCFWebServiceJson/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(DomainModel.Entities.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITRMWCFWebServiceJsonChannel : TRMTestRig.TRMWebServiceJson.ITRMWCFWebServiceJson, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TRMWCFWebServiceJsonClient : System.ServiceModel.ClientBase<TRMTestRig.TRMWebServiceJson.ITRMWCFWebServiceJson>, TRMTestRig.TRMWebServiceJson.ITRMWCFWebServiceJson {
        
        public TRMWCFWebServiceJsonClient() {
        }
        
        public TRMWCFWebServiceJsonClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TRMWCFWebServiceJsonClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TRMWCFWebServiceJsonClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TRMWCFWebServiceJsonClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SaveUserAccount(DomainModel.Entities.User user, DomainModel.Entities.Account.AccountTypeList accountType) {
            return base.Channel.SaveUserAccount(user, accountType);
        }
        
        public System.Threading.Tasks.Task<bool> SaveUserAccountAsync(DomainModel.Entities.User user, DomainModel.Entities.Account.AccountTypeList accountType) {
            return base.Channel.SaveUserAccountAsync(user, accountType);
        }
        
        public DomainModel.Entities.Account GetUserAccount(DomainModel.Entities.User user) {
            return base.Channel.GetUserAccount(user);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Account> GetUserAccountAsync(DomainModel.Entities.User user) {
            return base.Channel.GetUserAccountAsync(user);
        }
        
        public bool DeleteAccount(DomainModel.Entities.User user) {
            return base.Channel.DeleteAccount(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAccountAsync(DomainModel.Entities.User user) {
            return base.Channel.DeleteAccountAsync(user);
        }
        
        public DomainModel.Entities.Artist[] GetAllArtists() {
            return base.Channel.GetAllArtists();
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Artist[]> GetAllArtistsAsync() {
            return base.Channel.GetAllArtistsAsync();
        }
        
        public bool SaveArtistAlbum(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist) {
            return base.Channel.SaveArtistAlbum(album, artist);
        }
        
        public System.Threading.Tasks.Task<bool> SaveArtistAlbumAsync(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist) {
            return base.Channel.SaveArtistAlbumAsync(album, artist);
        }
        
        public DomainModel.Entities.Album[] GetArtistAlbums(DomainModel.Entities.Artist artist) {
            return base.Channel.GetArtistAlbums(artist);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Album[]> GetArtistAlbumsAsync(DomainModel.Entities.Artist artist) {
            return base.Channel.GetArtistAlbumsAsync(artist);
        }
        
        public DomainModel.Entities.Album GetArtistAlbumDetails(int albumId) {
            return base.Channel.GetArtistAlbumDetails(albumId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Album> GetArtistAlbumDetailsAsync(int albumId) {
            return base.Channel.GetArtistAlbumDetailsAsync(albumId);
        }
        
        public bool DeleteArtistAlbum(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist) {
            return base.Channel.DeleteArtistAlbum(album, artist);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteArtistAlbumAsync(DomainModel.Entities.Album album, DomainModel.Entities.Artist artist) {
            return base.Channel.DeleteArtistAlbumAsync(album, artist);
        }
        
        public bool UploadSong(DomainModel.Entities.Song song, string filePath, string ext) {
            return base.Channel.UploadSong(song, filePath, ext);
        }
        
        public System.Threading.Tasks.Task<bool> UploadSongAsync(DomainModel.Entities.Song song, string filePath, string ext) {
            return base.Channel.UploadSongAsync(song, filePath, ext);
        }
        
        public string DownloadSongOnServer(int songId) {
            return base.Channel.DownloadSongOnServer(songId);
        }
        
        public System.Threading.Tasks.Task<string> DownloadSongOnServerAsync(int songId) {
            return base.Channel.DownloadSongOnServerAsync(songId);
        }
        
        public System.IO.Stream DownloadFile(string filePath) {
            return base.Channel.DownloadFile(filePath);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string filePath) {
            return base.Channel.DownloadFileAsync(filePath);
        }
        
        public DomainModel.Entities.Song[] GetAllSongs() {
            return base.Channel.GetAllSongs();
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Song[]> GetAllSongsAsync() {
            return base.Channel.GetAllSongsAsync();
        }
        
        public DomainModel.Entities.Song[] GetArtistSongs(int wordpressUserId) {
            return base.Channel.GetArtistSongs(wordpressUserId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Song[]> GetArtistSongsAsync(int wordpressUserId) {
            return base.Channel.GetArtistSongsAsync(wordpressUserId);
        }
        
        public DomainModel.Entities.Song GetArtistSongDetails(int songId) {
            return base.Channel.GetArtistSongDetails(songId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Song> GetArtistSongDetailsAsync(int songId) {
            return base.Channel.GetArtistSongDetailsAsync(songId);
        }
        
        public DomainModel.Entities.MediaAsset[] GetSongMediaAssets(int songId) {
            return base.Channel.GetSongMediaAssets(songId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.MediaAsset[]> GetSongMediaAssetsAsync(int songId) {
            return base.Channel.GetSongMediaAssetsAsync(songId);
        }
        
        public DomainModel.Entities.MediaAsset[] GetSongMediaAssetsForDownload(int songId) {
            return base.Channel.GetSongMediaAssetsForDownload(songId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.MediaAsset[]> GetSongMediaAssetsForDownloadAsync(int songId) {
            return base.Channel.GetSongMediaAssetsForDownloadAsync(songId);
        }
        
        public bool DeleteSong(DomainModel.Entities.Song song) {
            return base.Channel.DeleteSong(song);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSongAsync(DomainModel.Entities.Song song) {
            return base.Channel.DeleteSongAsync(song);
        }
        
        public bool DeleteAlbumSong(DomainModel.Entities.Song song, DomainModel.Entities.Album album) {
            return base.Channel.DeleteAlbumSong(song, album);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAlbumSongAsync(DomainModel.Entities.Song song, DomainModel.Entities.Album album) {
            return base.Channel.DeleteAlbumSongAsync(song, album);
        }
        
        public DomainModel.Entities.Business[] GetAllBusinesses() {
            return base.Channel.GetAllBusinesses();
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Business[]> GetAllBusinessesAsync() {
            return base.Channel.GetAllBusinessesAsync();
        }
        
        public bool SavePlaylist(int wordpressUserId, DomainModel.Entities.Playlist playlist) {
            return base.Channel.SavePlaylist(wordpressUserId, playlist);
        }
        
        public System.Threading.Tasks.Task<bool> SavePlaylistAsync(int wordpressUserId, DomainModel.Entities.Playlist playlist) {
            return base.Channel.SavePlaylistAsync(wordpressUserId, playlist);
        }
        
        public bool DeletePlaylist(int playlistId) {
            return base.Channel.DeletePlaylist(playlistId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlaylistAsync(int playlistId) {
            return base.Channel.DeletePlaylistAsync(playlistId);
        }
        
        public bool DeletePlaylistSong(int songId, int playlistId) {
            return base.Channel.DeletePlaylistSong(songId, playlistId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlaylistSongAsync(int songId, int playlistId) {
            return base.Channel.DeletePlaylistSongAsync(songId, playlistId);
        }
        
        public DomainModel.Entities.BusinessType[] GetAllBusinessTypes() {
            return base.Channel.GetAllBusinessTypes();
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.BusinessType[]> GetAllBusinessTypesAsync() {
            return base.Channel.GetAllBusinessTypesAsync();
        }
        
        public DomainModel.Entities.Genre[] GetAllGenres() {
            return base.Channel.GetAllGenres();
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Genre[]> GetAllGenresAsync() {
            return base.Channel.GetAllGenresAsync();
        }
        
        public DomainModel.Entities.Genre GetGenre(int genreId) {
            return base.Channel.GetGenre(genreId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Genre> GetGenreAsync(int genreId) {
            return base.Channel.GetGenreAsync(genreId);
        }
        
        public bool RegisterAdmin(DomainModel.Entities.User user) {
            return base.Channel.RegisterAdmin(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAdminAsync(DomainModel.Entities.User user) {
            return base.Channel.RegisterAdminAsync(user);
        }
        
        public bool RegisterArtist(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection) {
            return base.Channel.RegisterArtist(user, genreCollection);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterArtistAsync(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection) {
            return base.Channel.RegisterArtistAsync(user, genreCollection);
        }
        
        public bool RegisterBusiness(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude) {
            return base.Channel.RegisterBusiness(user, businessType, latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterBusinessAsync(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude) {
            return base.Channel.RegisterBusinessAsync(user, businessType, latitude, longitude);
        }
        
        public bool RegisterCustomer(DomainModel.Entities.User user) {
            return base.Channel.RegisterCustomer(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterCustomerAsync(DomainModel.Entities.User user) {
            return base.Channel.RegisterCustomerAsync(user);
        }
        
        public bool UpdateBusinessUser(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude) {
            return base.Channel.UpdateBusinessUser(user, businessType, latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBusinessUserAsync(DomainModel.Entities.User user, DomainModel.Entities.BusinessType businessType, string latitude, string longitude) {
            return base.Channel.UpdateBusinessUserAsync(user, businessType, latitude, longitude);
        }
        
        public bool UpdateArtistGenreCollection(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection) {
            return base.Channel.UpdateArtistGenreCollection(user, genreCollection);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateArtistGenreCollectionAsync(DomainModel.Entities.User user, DomainModel.Entities.Genre[] genreCollection) {
            return base.Channel.UpdateArtistGenreCollectionAsync(user, genreCollection);
        }
        
        public DomainModel.Entities.User GetUserByWordpressUserId(int wordpressUserId) {
            return base.Channel.GetUserByWordpressUserId(wordpressUserId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.User> GetUserByWordpressUserIdAsync(int wordpressUserId) {
            return base.Channel.GetUserByWordpressUserIdAsync(wordpressUserId);
        }
        
        public DomainModel.Entities.User GetUserByUserId(int userId) {
            return base.Channel.GetUserByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.User> GetUserByUserIdAsync(int userId) {
            return base.Channel.GetUserByUserIdAsync(userId);
        }
        
        public DomainModel.Entities.Admin GetAdmin(int wordpressUserId) {
            return base.Channel.GetAdmin(wordpressUserId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Admin> GetAdminAsync(int wordpressUserId) {
            return base.Channel.GetAdminAsync(wordpressUserId);
        }
        
        public DomainModel.Entities.Artist GetArtist(int wordpressUserId) {
            return base.Channel.GetArtist(wordpressUserId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Artist> GetArtistAsync(int wordpressUserId) {
            return base.Channel.GetArtistAsync(wordpressUserId);
        }
        
        public DomainModel.Entities.Business GetBusiness(int wordpressUserId) {
            return base.Channel.GetBusiness(wordpressUserId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Business> GetBusinessAsync(int wordpressUserId) {
            return base.Channel.GetBusinessAsync(wordpressUserId);
        }
        
        public DomainModel.Entities.Customer GetCustomer(int wordpressUserId) {
            return base.Channel.GetCustomer(wordpressUserId);
        }
        
        public System.Threading.Tasks.Task<DomainModel.Entities.Customer> GetCustomerAsync(int wordpressUserId) {
            return base.Channel.GetCustomerAsync(wordpressUserId);
        }
        
        public bool DeleteUser(DomainModel.Entities.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(DomainModel.Entities.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
    }
}
